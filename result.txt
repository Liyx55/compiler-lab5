lno@0	@0	program	children: [@1 ]	

lno@2	@1	function	children: [@2 @3 @4 @8 @11 @14 @17 @20 ]	
lno@2	@2	type	type: void	
lno@2	@3	variable	varname: main	scope: 1	

lno@3	@4	statement	children: [@5 @6 @7 ]	decl	
lno@3	@5	type	type: int	
lno@3	@6	variable	varname: a	scope: 2	
lno@3	@7	variable	varname: s	scope: 3	

lno@4	@8	statement	op: =	children: [@9 @10 ]	assign	
lno@4	@9	variable	varname: a	scope: 2	
lno@4	@10	const	type: int	value: 10	

lno@5	@11	statement	op: =	children: [@12 @13 ]	assign	
lno@5	@12	variable	varname: s	scope: 3	
lno@5	@13	const	type: int	value: 0	

lno@6	@14	statement	children: [@15 @16 ]	decl	
lno@6	@15	type	type: char	
lno@6	@16	variable	varname: ch	scope: 4	

lno@7	@17	statement	children: [@18 @19 ]	scanf	
lno@7	@18	const	type: string	value:"%d"	
lno@7	@19	variable	varname: ch	scope: 4	

lno@8	@20	statement	children: [@21 @39 @42 @45 @48 @51 ]	while	
lno@8	@21	expression	op: &&	children: [@22 @35 ]	
lno@8	@22	expression	op: ||	children: [@23 @30 ]	
lno@8	@23	expression	op: &&	children: [@24 @27 ]	
lno@8	@24	expression	op: >	children: [@25 @26 ]	
lno@8	@25	variable	varname: a	scope: 2	
lno@8	@26	const	type: int	value: 0	
lno@8	@27	expression	op: <=	children: [@28 @29 ]	
lno@8	@28	variable	varname: a	scope: 2	
lno@8	@29	const	type: int	value: 10	
lno@8	@30	expression	op: ==	children: [@31 @34 ]	
lno@8	@31	expression	op: %	children: [@32 @33 ]	
lno@8	@32	variable	varname: a	scope: 2	
lno@8	@33	const	type: int	value: 100	
lno@8	@34	const	type: int	value: 10	
lno@8	@35	expression	op: ==	children: [@36 @38 ]	
lno@8	@36	expression	op: !	children: [@37 ]	
lno@8	@37	variable	varname: a	scope: 2	
lno@8	@38	const	type: int	value: 10	

lno@9	@39	statement	op: -=	children: [@40 @41 ]	assign	
lno@9	@40	variable	varname: a	scope: 2	
lno@9	@41	const	type: int	value: 1	

lno@10	@42	statement	children: [@43 @44 ]	decl	
lno@10	@43	type	type: int	
lno@10	@44	variable	varname: a	scope: 5	

lno@11	@45	statement	op: =	children: [@46 @47 ]	assign	
lno@11	@46	variable	varname: a	scope: 5	
lno@11	@47	const	type: int	value: 10	

lno@12	@48	statement	op: +=	children: [@49 @50 ]	assign	
lno@12	@49	variable	varname: s	scope: 3	
lno@12	@50	variable	varname: a	scope: 5	

lno@13	@51	statement	children: [@52 @57 @60 @63 @66 ]	if	
lno@13	@52	expression	op: <	children: [@53 @55 ]	
lno@13	@53	expression	op: -	children: [@54 ]	
lno@13	@54	variable	varname: s	scope: 3	
lno@13	@55	expression	op: -	children: [@56 ]	
lno@13	@56	const	type: int	value: 10	

lno@14	@57	statement	children: [@58 @59 ]	prinf	
lno@14	@58	const	type: string	value:"result is: %d\n"	
lno@14	@59	variable	varname: s	scope: 3	

lno@15	@60	statement	children: [@61 @62 ]	decl	
lno@15	@61	type	type: int	
lno@15	@62	variable	varname: b	scope: 6	

lno@16	@63	statement	op: =	children: [@64 @65 ]	assign	
lno@16	@64	variable	varname: b	scope: 6	
lno@16	@65	const	type: int	value: 10	

lno@17	@66	statement	children: [@67 @72 @75 @77 ]	for	
lno@17	@67	statement	children: [@68 @69 ]	decl	
lno@17	@68	type	type: int	
lno@17	@69	initiation	children: [@70 @71 ]	
lno@17	@70	variable	varname: i	scope: 7	
lno@17	@71	const	type: int	value: 0	
lno@17	@72	expression	op: <	children: [@73 @74 ]	
lno@17	@73	variable	varname: i	scope: 7	
lno@17	@74	variable	varname: b	scope: 6	
lno@17	@75	variable	varname: i	scope: 7	children: [@76 ]	
lno@17	@76	expression	op: ++	

lno@18	@77	statement	children: [@78 @79 ]	prinf	
lno@18	@78	const	type: string	value:"Have fun: %d\n"	
lno@18	@79	variable	varname: i	scope: 7	
